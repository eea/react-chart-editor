{"version":3,"file":"convertFormats.js","names":["getTextBlockRegExp","getLaTeXWrappedRegExp","stripHTMLTags","html","replace","trim","extractTextBlocks","laTeX","matchObj","matchStr","matches","stringifiedLaTeX","JSON","stringify","regExp","exec","push","join","wrapLaTeX","value","concat","wrapText","isLaTeXExpr","test","exports","hasTextExpression","htmlToLaTeX","breakTag","trimmedHTML","split","map","para","length","laTeXToHTML","trimmedLaTeX","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../../src/components/widgets/text_editors/convertFormats.js"],"sourcesContent":["const getTextBlockRegExp = () => /\\\\text\\{([^}]*)}/g;\n\n/**\n * To match any character including newline whitespace, use `[\\s\\S]*`\n * instead of `.*`. http://stackoverflow.com/a/1068308\n *\n * @returns {RegExp} the regular expression\n */\nconst getLaTeXWrappedRegExp = () => /^\\$[\\s\\S]*\\$$/;\n\nconst stripHTMLTags = (html) => html.replace(/<[^>]*>/g, '').trim();\n\nconst extractTextBlocks = (laTeX) => {\n  let matchObj;\n  let matchStr;\n  const matches = [];\n\n  // Need to stringify to match literally on `\\t`.\n  const stringifiedLaTeX = JSON.stringify(laTeX);\n  const regExp = getTextBlockRegExp();\n\n  /**\n   * Find multiple matches with the ``//g` flag.\n   * The `RegExp.prototype.exec` API mutates the RegExp object.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#Finding_successive_matches\n   */\n  while ((matchObj = regExp.exec(stringifiedLaTeX)) !== null) {\n    matchStr = matchObj[1].trim().replace('\\\\n', '');\n    matches.push(matchStr);\n  }\n  return matches.join('<br>');\n};\n\nconst wrapLaTeX = (value) => (value ? `$${value}$` : '$$');\n\nconst wrapText = (value) => (value ? `\\\\text{${value}}` : '\\\\text{}');\n\n// Exports\n// -------\n\nexport const isLaTeXExpr = (value) => getLaTeXWrappedRegExp().test(value);\n\nexport const hasTextExpression = (laTeX) => {\n  const regExp = getTextBlockRegExp();\n  const stringifiedLaTeX = JSON.stringify(laTeX);\n\n  return regExp.test(stringifiedLaTeX);\n};\n\nexport const htmlToLaTeX = (html) => {\n  const breakTag = '<br>';\n  const trimmedHTML = html.trim();\n\n  // Handle empty input\n  if (trimmedHTML === '') {\n    return wrapLaTeX(wrapText());\n  }\n\n  // Handle input with only linebreaks\n  if (trimmedHTML.replace(breakTag, '') === '') {\n    return wrapLaTeX(wrapText());\n  }\n\n  return wrapLaTeX(\n    trimmedHTML\n      .split(breakTag)\n\n      // Ignore empty linebreaks\n      .map((para) => (para.length ? wrapText(stripHTMLTags(para)) : ''))\n      .join('\\n')\n  );\n};\n\nexport const laTeXToHTML = (laTeX) => {\n  const trimmedLaTeX = laTeX.trim();\n\n  return extractTextBlocks(trimmedLaTeX);\n};\n"],"mappings":"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","ignoreList":[]}