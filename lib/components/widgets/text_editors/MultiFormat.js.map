{"version":3,"file":"MultiFormat.js","names":["_HTML","_interopRequireDefault","require","_LaTeX","_react","_interopRequireWildcard","_propTypes","_RichText","_convertFormats","_classnames","_Button","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","enterModule","reactHotLoaderGlobal","undefined","module","__signature__","signature","MultiFormatTextEditor","Component","constructor","props","context","_","localize","editors","key","label","component","RichTextEditor","LaTeXEditor","HTMLEditor","startTab","isLaTeXExpr","value","state","nextTab","currentTab","messages","onModeChange","bind","convertValue","editor","htmlToLaTeX","laTeXToHTML","defaultValuePattern","onChange","trimmedValue","trim","trimmedValueLength","length","convertedValue","isDefaultValue","test","switchingBetweenRichAndHtml","hasTextExpression","setState","renderConfirmationPanel","render","onCancel","onContinue","createElement","className","variant","onClick","renderEditor","placeholder","richTextClassNames","classnames","selected","latexClassNames","bottomTabClassNames","Editor","filter","ModeTabsText","map","showBottomTab","BottomTab","concat","toLowerCase","content","__reactstandin__regenerateByEval","code","eval","propTypes","PropTypes","instanceOf","RegExp","func","isRequired","string","defaultProps","contextTypes","_default","_default2","exports","reactHotLoader","register","leaveModule"],"sources":["../../../../src/components/widgets/text_editors/MultiFormat.js"],"sourcesContent":["import HTMLEditor from './HTML';\nimport LaTeXEditor from './LaTeX';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport RichTextEditor from './RichText';\nimport {isLaTeXExpr, htmlToLaTeX, laTeXToHTML, hasTextExpression} from './convertFormats';\nimport classnames from 'classnames';\nimport Button from 'components/widgets/Button';\n\nclass MultiFormatTextEditor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    const _ = context.localize;\n\n    const editors = [\n      {\n        key: 'RICH_TEXT',\n        label: _('Rich Text'),\n        component: RichTextEditor,\n      },\n      {\n        key: 'LATEX',\n        label: _('LaTeX'),\n        component: LaTeXEditor,\n      },\n      {\n        key: 'HTML',\n        label: _('Edit in HTML'),\n        component: HTMLEditor,\n      },\n    ];\n\n    const startTab = isLaTeXExpr(props.value) ? 'LATEX' : 'RICH_TEXT';\n\n    this.state = {\n      /*\n       * When nextTab is set, we are waiting for confirmation from the\n       * user before switching to the next tab.\n       */\n      nextTab: null,\n      currentTab: startTab,\n      messages: [],\n    };\n\n    this.onModeChange = this.onModeChange.bind(this);\n    this.editors = editors;\n  }\n\n  /**\n   * Convert a value to the format expected by the provided editor.\n   *\n   * @param {String} value The current value\n   * @param {String} editor The editor to convert for [RICH_TEXT|LATEX]\n   * @returns {String} The converted value\n   */\n  convertValue(value, editor) {\n    const {currentTab} = this.state;\n\n    if (currentTab === 'RICH_TEXT' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    if (currentTab === 'LATEX' && editor === 'RICH_TEXT') {\n      return laTeXToHTML(value);\n    }\n\n    if (currentTab === 'HTML' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    /*\n     * Else we're switching from / to HTML / Rich Text Editor\n     * no conversion is needed\n     */\n    return value;\n  }\n\n  onModeChange(nextTab) {\n    const {localize: _} = this.context;\n    const {defaultValuePattern, value, onChange} = this.props;\n    const {currentTab} = this.state;\n    const trimmedValue = value.trim();\n    const trimmedValueLength = trimmedValue.length;\n    const convertedValue = this.convertValue(trimmedValue, nextTab);\n\n    /*\n     * Check against default value - we have to compare the plain\n     * value, not the LaTeX format value with `\\text{}` wrapping.\n     */\n    const isDefaultValue = isLaTeXExpr(trimmedValue)\n      ? defaultValuePattern.test(convertedValue)\n      : defaultValuePattern.test(trimmedValue);\n\n    const switchingBetweenRichAndHtml =\n      (currentTab === 'RICH_TEXT' && nextTab === 'HTML') ||\n      (currentTab === 'HTML' && nextTab === 'RICH_TEXT');\n\n    if (!isDefaultValue && trimmedValueLength > 0 && !switchingBetweenRichAndHtml) {\n      // Show confirmation dialogue and defer tab change.\n      let messages;\n\n      if (!isLaTeXExpr(value)) {\n        messages = [\n          _(\"LaTeX is a math typesetting language that doesn't work with rich text.\"),\n          _('Continuing will convert your note to LaTeX-style text.'),\n        ];\n      } else if (hasTextExpression(value)) {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will convert your LaTeX expression into raw text.'),\n        ];\n      } else {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will remove your expression.'),\n        ];\n      }\n\n      this.setState({\n        nextTab,\n        messages,\n      });\n\n      return;\n    }\n\n    // Show requested tab immediately.\n    this.setState({\n      currentTab: nextTab,\n    });\n\n    // Convert the annotation and dispatch onChange action\n    onChange(convertedValue);\n  }\n\n  renderConfirmationPanel(render) {\n    if (!render) {\n      return null;\n    }\n\n    const {localize: _} = this.context;\n    const {messages} = this.state;\n\n    const onCancel = () => {\n      this.setState({\n        nextTab: null,\n      });\n    };\n\n    const onContinue = () => {\n      const {nextTab} = this.state;\n      const {onChange, value} = this.props;\n\n      // Set next tab as active\n      this.setState({\n        currentTab: nextTab,\n        nextTab: null,\n      });\n\n      // Convert the annotation\n      const convertedValue = this.convertValue(value, nextTab);\n      onChange(convertedValue);\n    };\n\n    return (\n      <div className=\"multi-format-editor__confirmation-panel\">\n        <div className=\"multi-format-editor__confirmation-panel__content\">\n          <h3 className=\"multi-format-editor__confirmation-panel__header\">{_('Heads up!')}</h3>\n          <div className=\"multi-format-editor__confirmation-panel__message\">\n            <p className=\"multi-format-editor__confirmation-panel__message-primary\">\n              {messages[0]}\n            </p>\n            <p className=\"multi-format-editor__confirmation-panel__message-secondary\">\n              {messages[1]}\n            </p>\n          </div>\n        </div>\n        <div className=\"multi-format-editor__confirmation-panel__actions\">\n          <Button\n            variant=\"default\"\n            className=\"multi-format-editor__confirmation-panel__cancel-button\"\n            onClick={onCancel}\n          >\n            {_('Go back')}\n          </Button>\n          <Button\n            variant=\"primary\"\n            className=\"multi-format-editor__confirmation-panel__continue-button\"\n            onClick={onContinue}\n          >\n            {_('Continue')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  renderEditor(render) {\n    if (!render) {\n      return null;\n    }\n    const {localize: _} = this.context;\n    const {onChange, placeholder, value} = this.props;\n\n    const {currentTab} = this.state;\n\n    const richTextClassNames = classnames('multi-format-editor__tab', 'top-tab', 'left', {\n      selected: currentTab === 'RICH_TEXT',\n    });\n    const latexClassNames = classnames('multi-format-editor__tab', 'top-tab', 'right', {\n      selected: currentTab === 'LATEX',\n    });\n    const bottomTabClassNames = classnames('multi-format-editor__tab', 'bottom-tab');\n\n    const Editor = this.editors.filter((editor) => editor.key === currentTab)[0].component;\n\n    const ModeTabsText = this.editors.map((editor) => editor.label);\n\n    const showBottomTab = currentTab === 'HTML' || currentTab === 'RICH_TEXT';\n    const BottomTab =\n      currentTab === 'HTML' ? (\n        <div className={bottomTabClassNames} onClick={() => this.onModeChange('RICH_TEXT')}>\n          {_('Edit in Rich Text')}\n        </div>\n      ) : (\n        <div className={bottomTabClassNames} onClick={() => this.onModeChange('HTML')}>\n          {_('Edit in HTML')}\n        </div>\n      );\n\n    return (\n      <div className=\"multi-format-editor__root__wrapper\">\n        <div className=\"multi-format-editor__tabs\">\n          <div className={richTextClassNames} onClick={() => this.onModeChange('RICH_TEXT')}>\n            {ModeTabsText[0]}\n          </div>\n          <div className={latexClassNames} onClick={() => this.onModeChange('LATEX')}>\n            {ModeTabsText[1]}\n          </div>\n        </div>\n        <div className={`multi-format-editor__content__wrapper__${currentTab.toLowerCase()}`}>\n          <Editor\n            className={`multi-format-editor__${currentTab.toLowerCase()}`}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n        </div>\n        {showBottomTab ? BottomTab : null}\n      </div>\n    );\n  }\n\n  render() {\n    /*\n     * `renderConfirmationPanel` and `renderEditor` are mutually\n     * exclusive; only one will return a component.\n     */\n    const {nextTab} = this.state;\n    const content =\n      this.renderConfirmationPanel(nextTab !== null) || this.renderEditor(nextTab === null);\n\n    return <div className=\"multi-format-editor__root\">{content}</div>;\n  }\n}\n\nMultiFormatTextEditor.propTypes = {\n  defaultValuePattern: PropTypes.instanceOf(RegExp),\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n};\n\nMultiFormatTextEditor.defaultProps = {\n  defaultValuePattern: /^$/,\n  placeholder: '',\n  value: '',\n};\n\nMultiFormatTextEditor.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default MultiFormatTextEditor;\n"],"mappings":"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","ignoreList":[]}