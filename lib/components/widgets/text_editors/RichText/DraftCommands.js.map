{"version":3,"file":"DraftCommands.js","names":["_draftJs","require","_DraftModifier","_configuration","enterModule","reactHotLoaderGlobal","undefined","module","__signature__","default","signature","a","selectionHasLink","editorState","selection","isCollapsed","cursorHasLink","entity","getEntityByKey","getEntityKeyAt","Boolean","get","LINK","entityKey","Entity","blockStartKey","getStartKey","selectionOffset","getStartOffset","contentState","getCurrentContent","block","getBlockForKey","getEntityAt","handleKeyCommand","command","insertSoftNewline","toggleInlineStyle","BOLD","ITALIC","newEditorState","currentStyleSet","getCurrentInlineStyle","reduce","reducedEditorState","style","RichUtils","selectionState","getSelection","selectionStart","selectionEnd","getEndOffset","removeRange","EditorState","push","inlineStyle","toggleLink","updatedEditorState","toggleMutuallyExclusiveStyles","create","url","SUBSCRIPT","includes","SUPERSCRIPT","reactHotLoader","register","leaveModule"],"sources":["../../../../../src/components/widgets/text_editors/RichText/DraftCommands.js"],"sourcesContent":["/*\n * This module exports functions that act on a DraftJS EditorState to\n * effect commands.\n */\n\nimport {\n  EditorState,\n  Entity,\n  RichUtils,\n\n  // Note: disable eslint cause SelectionState is mentioned quite often in JSDoc\n  // eslint-disable-next-line no-unused-vars\n  SelectionState,\n} from 'draft-js';\nimport {removeRange} from 'draft-js/lib/DraftModifier';\n\nimport {BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, LINK} from './configuration';\n\n/**\n * Check whether the current selection is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if selection is over a link\n */\nfunction selectionHasLink(editorState, selection) {\n  // If nothing is selected, bail early.\n  if (selection.isCollapsed()) {\n    return false;\n  }\n\n  return cursorHasLink(editorState, selection);\n}\n\n/**\n * Check whether the cursor position is over a link\n *\n * @param   {EditorState} editorState   The DraftJS editor state\n * @param   {SelectionState} selection  A DraftJS selection state\n * @returns {Boolean}                   `true` if cursor is over a link\n */\nexport function cursorHasLink(editorState, selection) {\n  const entity = getEntityByKey(getEntityKeyAt(editorState, selection));\n\n  return Boolean(entity && entity.get('type') === LINK);\n}\n\n/**\n * Get an entity by its key\n * Links are represented as DraftJS entities.\n * https://facebook.github.io/draft-js/docs/api-reference-entity.html#content\n *\n * @param   {String} entityKey    The entity key\n * @returns {DraftEntityInstance} The entity for the key, or `null` if not found\n */\nexport function getEntityByKey(entityKey) {\n  if (!entityKey) {\n    return null;\n  }\n\n  return Entity.get(entityKey);\n}\n\n/**\n * For a given SelectionState, get the underlying entity key.\n *\n * @param   {EditorState} editorState  The DraftJS editor state\n * @param   {SelectionState} selection The DraftJS selection state\n * @returns {String}                   The entity key, or `null` if not found\n */\nexport function getEntityKeyAt(editorState, selection) {\n  if (!selection) {\n    return null;\n  }\n\n  const blockStartKey = selection.getStartKey();\n  const selectionOffset = selection.getStartOffset();\n\n  const contentState = editorState.getCurrentContent();\n  const block = contentState.getBlockForKey(blockStartKey);\n\n  return block.getEntityAt(selectionOffset);\n}\n\n/**\n * Handle a keyboard command.\n * TODO: add custom CMD-k command for link button.\n * https://github.com/plotly/streambed/issues/6384\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} command          The command string representation\n * @returns {EditorState}             The new editor state\n */\nexport function handleKeyCommand(editorState, command) {\n  switch (command) {\n    case 'split-block':\n      // Never split editor content into `<p>` blocks.\n      return insertSoftNewline(editorState);\n    case 'bold':\n      return toggleInlineStyle(editorState, BOLD);\n    case 'italic':\n      return toggleInlineStyle(editorState, ITALIC);\n    default:\n      return false;\n  }\n}\n\n/**\n * Insert a soft newline `\\n` that converts to `<br>` in HTML.\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function insertSoftNewline(editorState) {\n  let newEditorState = editorState;\n\n  // Terminate all current inline styles\n  const currentStyleSet = newEditorState.getCurrentInlineStyle();\n  newEditorState = currentStyleSet.reduce(\n    (reducedEditorState, style) => RichUtils.toggleInlineStyle(reducedEditorState, style),\n    newEditorState\n  );\n\n  // If text is selected, delete text first.\n  const selectionState = newEditorState.getSelection();\n  const selectionStart = selectionState.getStartOffset();\n  const selectionEnd = selectionState.getEndOffset();\n\n  if (selectionEnd - selectionStart !== 0) {\n    const contentState = removeRange(newEditorState.getCurrentContent(), selectionState, 'back');\n\n    newEditorState = EditorState.push(newEditorState, contentState, 'backspace-character');\n  }\n\n  // Insert a newline\n  return RichUtils.insertSoftNewline(newEditorState);\n}\n\n/**\n * Toggle an inline style on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @param   {String} inlineStyle      The inline style string representation\n * @returns {EditorState}             The new editor state\n */\nexport function toggleInlineStyle(editorState, inlineStyle) {\n  /*\n   * TODO tech-debt. Link toggles should not go via toggleInlineStyle.\n   * https://github.com/plotly/streambed/issues/6354\n   */\n\n  if (inlineStyle === LINK) {\n    return toggleLink(editorState);\n  }\n\n  // <sub> and <sup> should be mutually exclusive.\n  const updatedEditorState = toggleMutuallyExclusiveStyles(editorState, inlineStyle);\n\n  // Add the new style.\n  return RichUtils.toggleInlineStyle(updatedEditorState, inlineStyle);\n}\n\n/**\n * Toggle a link on/off\n *\n * @param   {EditorState} editorState The DraftJS editor state\n * @returns {EditorState}             The new editor state\n */\nexport function toggleLink(editorState) {\n  const selection = editorState.getSelection();\n\n  if (selectionHasLink(editorState, selection)) {\n    // Remove link\n    return RichUtils.toggleLink(editorState, selection, null);\n  }\n\n  // Create a link with an empty URL\n  const entityKey = Entity.create(LINK, 'MUTABLE', {url: ''});\n\n  return RichUtils.toggleLink(editorState, selection, entityKey);\n}\n\n/**\n * For the current selection, if a SUPERSCRIPT or SUBSCRIPT style is\n * to be applied, un-apply the other style.\n *\n * @param {EditorState} editorState The DraftJS editor state\n * @param {String} inlineStyle      Style about to be applied\n * @returns {EditorState}           The new editor state\n */\nexport function toggleMutuallyExclusiveStyles(editorState, inlineStyle) {\n  const currentStyleSet = editorState.getCurrentInlineStyle();\n\n  if (inlineStyle === SUBSCRIPT && currentStyleSet.includes(SUPERSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUPERSCRIPT);\n  }\n\n  if (inlineStyle === SUPERSCRIPT && currentStyleSet.includes(SUBSCRIPT)) {\n    return RichUtils.toggleInlineStyle(editorState, SUBSCRIPT);\n  }\n\n  return editorState;\n}\n"],"mappings":"0ZAKA,IAAAA,QAAA,CAAAC,OAAA,aASA,IAAAC,cAAA,CAAAD,OAAA,+BAEA,IAAAE,cAAA,CAAAF,OAAA,oBAA2E,gBAAAG,WAAA,QAAAC,oBAAA,eAAAA,oBAAA,CAAAD,WAAA,CAAAE,SAAA,CAAAF,WAAA,EAAAA,WAAA,CAAAG,MAAA,UAAAC,aAAA,QAAAH,oBAAA,eAAAA,oBAAA,CAAAI,OAAA,CAAAC,SAAA,UAAAC,CAAA,SAAAA,CAAA,EAS3E,QAAS,CAAAC,gBAAgBA,CAACC,WAAW,CAAEC,SAAS,CAAE,CAEhD,GAAIA,SAAS,CAACC,WAAW,CAAC,CAAC,CAAE,CAC3B,MAAO,MACT,CAEA,MAAO,CAAAC,aAAa,CAACH,WAAW,CAAEC,SAAS,CAC7C,CASO,QAAS,CAAAE,aAAaA,CAACH,WAAW,CAAEC,SAAS,CAAE,CACpD,GAAM,CAAAG,MAAM,CAAGC,cAAc,CAACC,cAAc,CAACN,WAAW,CAAEC,SAAS,CAAC,CAAC,CAErE,MAAO,CAAAM,OAAO,CAACH,MAAM,EAAIA,MAAM,CAACI,GAAG,CAAC,MAAM,CAAC,GAAKC,mBAAI,CACtD,CAUO,QAAS,CAAAJ,cAAcA,CAACK,SAAS,CAAE,CACxC,GAAI,CAACA,SAAS,CAAE,CACd,MAAO,KACT,CAEA,MAAO,CAAAC,eAAM,CAACH,GAAG,CAACE,SAAS,CAC7B,CASO,QAAS,CAAAJ,cAAcA,CAACN,WAAW,CAAEC,SAAS,CAAE,CACrD,GAAI,CAACA,SAAS,CAAE,CACd,MAAO,KACT,CAEA,GAAM,CAAAW,aAAa,CAAGX,SAAS,CAACY,WAAW,CAAC,CAAC,CAC7C,GAAM,CAAAC,eAAe,CAAGb,SAAS,CAACc,cAAc,CAAC,CAAC,CAElD,GAAM,CAAAC,YAAY,CAAGhB,WAAW,CAACiB,iBAAiB,CAAC,CAAC,CACpD,GAAM,CAAAC,KAAK,CAAGF,YAAY,CAACG,cAAc,CAACP,aAAa,CAAC,CAExD,MAAO,CAAAM,KAAK,CAACE,WAAW,CAACN,eAAe,CAC1C,CAWO,QAAS,CAAAO,gBAAgBA,CAACrB,WAAW,CAAEsB,OAAO,CAAE,CACrD,OAAQA,OAAO,EACb,IAAK,aAAa,CAEhB,MAAO,CAAAC,iBAAiB,CAACvB,WAAW,CAAC,CACvC,IAAK,MAAM,CACT,MAAO,CAAAwB,iBAAiB,CAACxB,WAAW,CAAEyB,mBAAI,CAAC,CAC7C,IAAK,QAAQ,CACX,MAAO,CAAAD,iBAAiB,CAACxB,WAAW,CAAE0B,qBAAM,CAAC,CAC/C,QACE,MAAO,MACX,CACF,CAQO,QAAS,CAAAH,iBAAiBA,CAACvB,WAAW,CAAE,CAC7C,GAAI,CAAA2B,cAAc,CAAG3B,WAAW,CAGhC,GAAM,CAAA4B,eAAe,CAAGD,cAAc,CAACE,qBAAqB,CAAC,CAAC,CAC9DF,cAAc,CAAGC,eAAe,CAACE,MAAM,CACrC,CAACC,kBAAkB,CAAEC,KAAK,GAAKC,kBAAS,CAACT,iBAAiB,CAACO,kBAAkB,CAAEC,KAAK,CAAC,CACrFL,cACF,CAAC,CAGD,GAAM,CAAAO,cAAc,CAAGP,cAAc,CAACQ,YAAY,CAAC,CAAC,CACpD,GAAM,CAAAC,cAAc,CAAGF,cAAc,CAACnB,cAAc,CAAC,CAAC,CACtD,GAAM,CAAAsB,YAAY,CAAGH,cAAc,CAACI,YAAY,CAAC,CAAC,CAElD,GAAID,YAAY,CAAGD,cAAc,GAAK,CAAC,CAAE,CACvC,GAAM,CAAApB,YAAY,CAAG,GAAAuB,0BAAW,EAACZ,cAAc,CAACV,iBAAiB,CAAC,CAAC,CAAEiB,cAAc,CAAE,MAAM,CAAC,CAE5FP,cAAc,CAAGa,oBAAW,CAACC,IAAI,CAACd,cAAc,CAAEX,YAAY,CAAE,qBAAqB,CACvF,CAGA,MAAO,CAAAiB,kBAAS,CAACV,iBAAiB,CAACI,cAAc,CACnD,CASO,QAAS,CAAAH,iBAAiBA,CAACxB,WAAW,CAAE0C,WAAW,CAAE,CAM1D,GAAIA,WAAW,GAAKjC,mBAAI,CAAE,CACxB,MAAO,CAAAkC,UAAU,CAAC3C,WAAW,CAC/B,CAGA,GAAM,CAAA4C,kBAAkB,CAAGC,6BAA6B,CAAC7C,WAAW,CAAE0C,WAAW,CAAC,CAGlF,MAAO,CAAAT,kBAAS,CAACT,iBAAiB,CAACoB,kBAAkB,CAAEF,WAAW,CACpE,CAQO,QAAS,CAAAC,UAAUA,CAAC3C,WAAW,CAAE,CACtC,GAAM,CAAAC,SAAS,CAAGD,WAAW,CAACmC,YAAY,CAAC,CAAC,CAE5C,GAAIpC,gBAAgB,CAACC,WAAW,CAAEC,SAAS,CAAC,CAAE,CAE5C,MAAO,CAAAgC,kBAAS,CAACU,UAAU,CAAC3C,WAAW,CAAEC,SAAS,CAAE,IAAI,CAC1D,CAGA,GAAM,CAAAS,SAAS,CAAGC,eAAM,CAACmC,MAAM,CAACrC,mBAAI,CAAE,SAAS,CAAE,CAACsC,GAAG,CAAE,EAAE,CAAC,CAAC,CAE3D,MAAO,CAAAd,kBAAS,CAACU,UAAU,CAAC3C,WAAW,CAAEC,SAAS,CAAES,SAAS,CAC/D,CAUO,QAAS,CAAAmC,6BAA6BA,CAAC7C,WAAW,CAAE0C,WAAW,CAAE,CACtE,GAAM,CAAAd,eAAe,CAAG5B,WAAW,CAAC6B,qBAAqB,CAAC,CAAC,CAE3D,GAAIa,WAAW,GAAKM,wBAAS,EAAIpB,eAAe,CAACqB,QAAQ,CAACC,0BAAW,CAAC,CAAE,CACtE,MAAO,CAAAjB,kBAAS,CAACT,iBAAiB,CAACxB,WAAW,CAAEkD,0BAAW,CAC7D,CAEA,GAAIR,WAAW,GAAKQ,0BAAW,EAAItB,eAAe,CAACqB,QAAQ,CAACD,wBAAS,CAAC,CAAE,CACtE,MAAO,CAAAf,kBAAS,CAACT,iBAAiB,CAACxB,WAAW,CAAEgD,wBAAS,CAC3D,CAEA,MAAO,CAAAhD,WACT,CAAC,iBAAAmD,cAAA,QAAA3D,oBAAA,eAAAA,oBAAA,CAAAI,OAAA,CAAAH,SAAA,KAAA0D,cAAA,SAAAA,cAAA,CAAAC,QAAA,CAjLQrD,gBAAgB,2HAAAoD,cAAA,CAAAC,QAAA,CAgBTjD,aAAa,wHAAAgD,cAAA,CAAAC,QAAA,CAcb/C,cAAc,yHAAA8C,cAAA,CAAAC,QAAA,CAed9C,cAAc,yHAAA6C,cAAA,CAAAC,QAAA,CAuBd/B,gBAAgB,2HAAA8B,cAAA,CAAAC,QAAA,CAoBhB7B,iBAAiB,4HAAA4B,cAAA,CAAAC,QAAA,CAgCjB5B,iBAAiB,4HAAA2B,cAAA,CAAAC,QAAA,CAuBjBT,UAAU,qHAAAQ,cAAA,CAAAC,QAAA,CAsBVP,6BAA6B,6JAAAQ,WAAA,QAAA7D,oBAAA,eAAAA,oBAAA,CAAA6D,WAAA,CAAA5D,SAAA,CAAA4D,WAAA,EAAAA,WAAA,CAAA3D,MAAA","ignoreList":[]}