"use strict";var _react=_interopRequireDefault(require("react"));var _=require("..");var _fields=require("../../fields");var _testUtils=require("../../../lib/test-utils");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var __signature__=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default.signature:function(a){return a};describe("<TraceAccordion>",()=>{it("generates trace PlotlyFolds with name == text",()=>{const fixture=_testUtils.fixtures.scatter({data:[{name:"hodor"}]});const folds=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({},fixture),{},{onUpdate:jest.fn()}),_react.default.createElement(_.LayoutPanel,null,_react.default.createElement(_.TraceAccordion,null,_react.default.createElement(_fields.TextEditor,{attr:"name"}))))).find(_.PlotlyFold);expect(folds.at(0).prop("name")).toBe("hodor")});it("can add traces",()=>{const fixture=_testUtils.fixtures.scatter({data:[{name:"hodor"}]});const beforeAddTrace=jest.fn();const editor=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({},fixture),{},{beforeAddTrace}),_react.default.createElement(_.LayoutPanel,null,_react.default.createElement(_.TraceAccordion,{canAdd:true},_react.default.createElement(_fields.TextEditor,{attr:"name"})))));editor.find("button.js-add-button").simulate("click");expect(beforeAddTrace).toBeCalled()});it("can delete traces",()=>{const fixture=_testUtils.fixtures.scatter({data:[{name:"hodor"}]});const beforeDeleteTrace=jest.fn();const editor=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({},fixture),{},{beforeDeleteTrace}),_react.default.createElement(_.LayoutPanel,null,_react.default.createElement(_.TraceAccordion,{canAdd:true},_react.default.createElement(_fields.TextEditor,{attr:"name"})))));editor.find(".js-fold__delete").at(0).simulate("click");expect(beforeDeleteTrace).toBeCalled();const update=beforeDeleteTrace.mock.calls[0][0];expect(update.traceIndexes[0]).toBe(0)})});
//# sourceMappingURL=TraceAccordion-test.js.map