"use strict";var _derived=require("../derived");var _Dropdown=_interopRequireDefault(require("../../widgets/Dropdown"));var _react=_interopRequireDefault(require("react"));var _=require("../../");var _testUtils=require("../../../lib/test-utils");var _lib=require("../../../lib");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(function(){var enterModule=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.enterModule:undefined;enterModule&&enterModule(module)})();function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var __signature__=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default.signature:function(a){return a};var LayoutAnnoPanel=(0,_lib.connectLayoutToPlot)((0,_lib.connectAnnotationToLayout)(_.PlotlyPanel));describe("<AnnotationRef>",()=>{function render(props){return(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({onUpdate:jest.fn()},props),{},{plotly:_testUtils.plotly}),_react.default.createElement(LayoutAnnoPanel,{name:"Layout",annotationIndex:0},_react.default.createElement(_derived.AnnotationRef,{attr:"yref"}))))}it("computes axes options for all axes using title and ids as labels",()=>{var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor"}]}});var drop=render(_objectSpread({},fixtureProps)).find(_Dropdown.default);var options=drop.first().prop("options");expect(options.length).toBe(3);expect(options[0]).toEqual({label:"Canvas",value:"paper"});expect(options[1]).toEqual({label:"Y 1",value:"y"});expect(options[2]).toEqual({label:"Y: yaxis2 title",value:"y2"})});it("sends update for a[x|y]ref attr on [x|y]ref change",()=>{var beforeUpdateLayout=jest.fn();var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor",ayref:"y"}]}});var drop=render(_objectSpread({beforeUpdateLayout},fixtureProps)).find(_Dropdown.default);drop.prop("onChange")("y2");var update=beforeUpdateLayout.mock.calls[0][0].update;expect(update).toEqual({"annotations[0].ayref":"y2","annotations[0].yref":"y2"})});it("does not send update for a[x|y]ref attr on \"paper\" change",()=>{var beforeUpdateLayout=jest.fn();var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor",ayref:"y"}]}});var drop=render(_objectSpread({beforeUpdateLayout},fixtureProps)).find(_Dropdown.default);drop.prop("onChange")("paper");var update=beforeUpdateLayout.mock.calls[0][0].update;expect(update).toEqual({"annotations[0].yref":"paper"})});it("does not send update for a[x|y]ref when a[x|y]ref is pixel",()=>{var beforeUpdateLayout=jest.fn();var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor",yref:"y",ayref:"pixel"}]}});var drop=render(_objectSpread({beforeUpdateLayout},fixtureProps)).find(_Dropdown.default);drop.prop("onChange")("y2");var update=beforeUpdateLayout.mock.calls[0][0].update;expect(update).toEqual({"annotations[0].yref":"y2"})})});describe("<AnnotationArrowRef>",()=>{function render(props){return(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({onUpdate:jest.fn()},props),{},{plotly:_testUtils.plotly}),_react.default.createElement(LayoutAnnoPanel,{name:"Layout",annotationIndex:0},_react.default.createElement(_derived.AnnotationArrowRef,{attr:"ayref"}))))}it("uses current value of axis ref as axes option when [x|y]ref set",()=>{var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor",yref:"y"}]}});var drop=render(_objectSpread({},fixtureProps)).find(_Dropdown.default);var options=drop.first().prop("options");expect(options.length).toBe(2);expect(options[0]).toEqual({label:"in pixels",value:"pixel"});expect(options[1]).toEqual({label:"according to axis",value:"y"})});it("provides all axes options when [x|y]ref set to paper",()=>{var fixtureProps=_testUtils.fixtures.scatter({layout:{annotations:[{text:"thor",yref:"paper"}]}});var drop=render(_objectSpread({},fixtureProps)).find(_Dropdown.default);var options=drop.first().prop("options");expect(options.length).toBe(3);expect(options[0]).toEqual({label:"in pixels",value:"pixel"});expect(options[1]).toEqual({label:"Y 1",value:"y"});expect(options[2]).toEqual({label:"Y: yaxis2 title",value:"y2"})})});;(function(){var reactHotLoader=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default:undefined;if(!reactHotLoader){return}reactHotLoader.register(LayoutAnnoPanel,"LayoutAnnoPanel","/Users/razvan/Work/react-chart-editor/src/components/fields/__tests__/AnnotationRef-test.js")})();;(function(){var leaveModule=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.leaveModule:undefined;leaveModule&&leaveModule(module)})();
//# sourceMappingURL=AnnotationRef-test.js.map