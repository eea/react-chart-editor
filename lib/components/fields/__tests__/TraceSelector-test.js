"use strict";var _Dropdown=_interopRequireDefault(require("../../widgets/Dropdown"));var _react=_interopRequireDefault(require("react"));var _TraceSelector=_interopRequireDefault(require("../TraceSelector"));var _containers=require("../../containers");var _testUtils=require("../../../lib/test-utils");var _lib=require("../../../lib");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var __signature__=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default.signature:function(a){return a};describe("TraceSelector",()=>{var TraceSection=(0,_lib.connectTraceToPlot)(_containers.PlotlySection);it("sets mode to markers if trace scatter, no data or mode provided",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{mode:null,xsrc:null,ysrc:null}]})),{},{onUpdate:jest.fn()});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("scatter")});it("if no data provided, but mode is provided, displays correct trace type",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{mode:"lines+markers",xsrc:null,ysrc:null}]})),{},{onUpdate:jest.fn()});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("line")});it("if data provided, but no mode is provided, chooses mode according to fullData",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter()),{},{onUpdate:jest.fn()});expect(!editorProps.graphDiv.data[0].mode).toBe(true);expect(editorProps.graphDiv._fullData[0].mode).toBe("lines+markers");var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("line")});it("interprets scatter + fill as type=area",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{fill:"tonexty"}]})),{},{onUpdate:jest.fn()});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("area")});it("interprets scatter + mode=lines as type=line",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{mode:"lines"}]})),{},{onUpdate:jest.fn()});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("line")});it("interprets scatter + mode=lines+markers as type=line",()=>{var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{mode:"lines+markers"}]})),{},{onUpdate:jest.fn()});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_extends({},editorProps,{plotly:_testUtils.plotly}),_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);expect(innerDropdown.prop("value")).toEqual("line")});it("updates type=scatter mode=lines when type=line",()=>{var beforeUpdateTraces=jest.fn();var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{type:"scatter",mode:"markers"}]})),{},{beforeUpdateTraces,plotly:_testUtils.plotly});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,editorProps,_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);innerDropdown.prop("onChange")("line");var payload=beforeUpdateTraces.mock.calls[0][0];expect(payload.update).toEqual({stackgroup:null,mode:"lines",type:"scatter"})});it("updates type=scatter stackgroup=1 when type=area",()=>{var beforeUpdateTraces=jest.fn();var editorProps=_objectSpread(_objectSpread({},_testUtils.fixtures.scatter({data:[{type:"scatter",mode:"markers"}]})),{},{beforeUpdateTraces,plotly:_testUtils.plotly});var wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,editorProps,_react.default.createElement(TraceSection,{traceIndexes:[0]},_react.default.createElement(_TraceSelector.default,{attr:"type"})))).find(_TraceSelector.default);var innerDropdown=wrapper.find(_Dropdown.default);innerDropdown.prop("onChange")("area");var payload=beforeUpdateTraces.mock.calls[0][0];expect(payload.update).toEqual({type:"scatter",mode:"lines",stackgroup:1})})});
//# sourceMappingURL=TraceSelector-test.js.map