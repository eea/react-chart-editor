{"version":3,"file":"walkObject.js","names":["isPlainObject","input","Array","isArray","doArrayWalk","key","value","walkArrays","walkArraysMatchingKeys","includes","getPath","pathType","arguments","length","undefined","_path","set","parent","nextPath","concat","Error","get","makeAttrSetterPath","parts","path","i0","i","_walkObject","object","callback","config","Object","keys","forEach","walkObject","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../src/lib/walkObject.js"],"sourcesContent":["export function isPlainObject(input) {\n  return input && !Array.isArray(input) && typeof input === 'object';\n}\n\n/*\n * Helper function for _walkObject\n */\nfunction doArrayWalk(key, value, walkArrays, walkArraysMatchingKeys) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n\n  if (walkArrays || (walkArraysMatchingKeys && walkArraysMatchingKeys.includes(key))) {\n    return true;\n  }\n\n  return false;\n}\n\n/*\n * Helper utility for path accumulation in _walkObject. Supports array\n * path accumulation and also Plotly.js nestedProperty style.\n */\nfunction getPath(pathType = 'array', _path) {\n  return {\n    _path: _path || (pathType === 'array' ? [] : ''),\n    set(parent, key) {\n      let nextPath;\n      switch (pathType) {\n        case 'array':\n          nextPath = this._path.concat([key]);\n          break;\n\n        case 'nestedProperty':\n          if (this._path.length === 0) {\n            nextPath = key;\n          } else if (Array.isArray(parent)) {\n            nextPath = this._path + `[${key}]`;\n          } else {\n            nextPath = this._path + '.' + key;\n          }\n          break;\n\n        default:\n          throw new Error('unrecognized pathType ' + pathType);\n      }\n\n      return getPath(pathType, nextPath);\n    },\n\n    get(parent, key) {\n      // in array mode we do not return the leaf node key.\n      if (pathType === 'array') {\n        return this._path;\n      }\n\n      // in nestedProperty mode we return full path including final key\n      return this.set(parent, key)._path;\n    },\n  };\n}\n\n/*\n * Helper function that transforms an array of path parts into a single path.\n * For example:\n *\n *  ['_fullData', 0, 'transforms', 3, 'type'] => 'transforms[3].type'\n *\n * Note that it strips out the _fullData part (and also _fullInput) since that's\n * usually present in the attribute path but isn't necessary in the attribute\n * string since it's usually implicitly applied through the userDataIndex.\n */\nexport function makeAttrSetterPath(parts) {\n  let path = '';\n\n  // Truncate the leading parts that aren't intersting when applying changes:\n  let i0 = 0;\n  if (parts[i0] === '_fullData') {\n    i0 += 2;\n  }\n  if (parts[i0] === '_fullInput') {\n    i0++;\n  }\n  if (parts[i0] === '_fullLayout') {\n    i0++;\n  }\n\n  for (let i = i0; i < parts.length; i++) {\n    if (typeof parts[i] === 'number' || Array.isArray(parts[i])) {\n      path += '[' + (Array.isArray(parts[i]) ? parts[i][0] : parts[i]) + ']';\n    } else {\n      path += (i > i0 ? '.' : '') + parts[i];\n    }\n  }\n  return path;\n}\n\n/**\n * The function that walkObject calls at each node.\n *\n * @callback walkObjectCallback\n * @param {string|number} key The current key, which may be nested.\n * @param {object} parent The object which owns the 'key' as a prop.\n * @param {Array} path The keys that lead to the 'parent' object.\n * @returns {boolean} True if the value at 'key' should *not* be traversed into\n *                    if it happens to be an object. I.e., you don't need to\n *                    return anything if you want the default traversal of the\n *                    whole object.\n */\n\n/**\n * Walks through object and recurses if necessary.\n *\n * @param {object} object The top-level or nested object we're walking through.\n * @param {walkObjectCallback} callback Called at each object node.\n * @param {Array} path The keys that lead from to top-level object to this one.\n * @param {object} config configuration object\n * @param {string} config.walkArrays flag allowing array walking\n * @param {Array} config.walkArraysMatchingKeys An array of keys permitting\n *                                              array walking\n * @param {string} config.pathType Either 'array' or 'nestedProperty'. Array\n *                                 based paths return string keys in an array up\n *                                 until the current key position.\n *                                 NestedProperty style returns a single\n *                                 concatenated \"nestedProperty\" style string.\n * @returns {void}\n * @private\n */\nfunction _walkObject(object, callback, path, config) {\n  const {walkArrays, walkArraysMatchingKeys} = config;\n  Object.keys(object).forEach((key) => {\n    // Callback can force traversal to stop by returning `true`.\n    if (callback(key, object, path.get(object, key))) {\n      return;\n    }\n\n    const value = object[key];\n    if (isPlainObject(value) || doArrayWalk(key, value, walkArrays, walkArraysMatchingKeys)) {\n      _walkObject(value, callback, path.set(object, key), config);\n    }\n  });\n}\n\n/**\n * General function to walk object and call the given callback for each node.\n *\n * @param {Object|Array} input The object or array we want to walk.\n * @param {walkObjectCallback} callback Called at each object node.\n * @param {Object} [config] configuration object\n * @param {Boolean} [config.walkArrays] flag allowing array walking\n * @param {Array} [config.walkArraysMatchingKeys] An array of keys permitting\n *                                              array walking\n * @param {String} [config.pathType] Either 'array' or 'nestedProperty'. Array\n *                                   based paths return string keys in an array\n *                                   up until the current key position.\n *                                   NestedProperty style returns a single\n *                                   concatenated \"nestedProperty\" style string\n *                                   with the current key included in the path.\n *                                   Defaults to \"array\"\n * @returns {void}\n */\nexport default function walkObject(input, callback, config = {}) {\n  if (!isPlainObject(input) && !Array.isArray(input)) {\n    throw new Error('The input must be an object.');\n  }\n  var path = getPath(config.pathType);\n  _walkObject(input, callback, path, config);\n}\n"],"mappings":"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","ignoreList":[]}