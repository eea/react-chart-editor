"use strict";var _NumericInput=_interopRequireDefault(require("../../components/widgets/NumericInput"));var _react=_interopRequireDefault(require("react"));var _components=require("../../components");var _testUtils=require("../test-utils");var _=require("..");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _defineProperty(e,r,t){return(r=_toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function _toPropertyKey(t){var i=_toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}var __signature__=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default.signature:function(a){return a};describe("Plot Connection",()=>{it("can connect Field directly with full connection pipeline",()=>{const beforeUpdateLayout=jest.fn();const fixtureProps=_testUtils.fixtures.scatter({layout:{xaxis:{range:[0,10]}}});const LayoutAxesNumeric=(0,_.connectLayoutToPlot)((0,_.connectAxesToLayout)((0,_.connectToContainer)(_components.Numeric)));(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({},fixtureProps),{},{beforeUpdateLayout}),_react.default.createElement(LayoutAxesNumeric,{label:"Min",attr:"range[0]"}))).find("[attr=\"range[0]\"]").find(_NumericInput.default).find(".js-numeric-increase").simulate("click");expect(beforeUpdateLayout).toBeCalled();const payload=beforeUpdateLayout.mock.calls[0][0];expect(payload).toEqual({update:{"xaxis.range[0]":1}})});it("can connect to layout when connected within trace context",()=>{const beforeUpdateLayout=jest.fn();const fixtureProps=_testUtils.fixtures.scatter({layout:{width:10}});const TraceLayoutNumeric=(0,_.connectTraceToPlot)((0,_.connectLayoutToPlot)((0,_.connectToContainer)(_components.Numeric)));(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread(_objectSpread({},fixtureProps),{},{beforeUpdateLayout}),_react.default.createElement(TraceLayoutNumeric,{traceIndexes:[0],label:"Width",attr:"width"}))).find("[attr=\"width\"]").find(_NumericInput.default).find(".js-numeric-increase").simulate("click");expect(beforeUpdateLayout).toBeCalled();const payload=beforeUpdateLayout.mock.calls[0][0];expect(payload).toEqual({update:{width:11}})});it("can't find correct Container when PlotlySection divides Trace and Layout",()=>{const fixtureProps=_testUtils.fixtures.scatter({layout:{width:10}});const DeeplyConnectedNumeric=(0,_.connectTraceToPlot)((0,_.connectLayoutToPlot)((0,_.connectToContainer)(_components.Numeric,{modifyPlotProps:(props,context,plotProps)=>{plotProps.connectToContainerModifiedPlotProp=true}})));const wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread({},fixtureProps),_react.default.createElement(_components.PlotlySection,{name:"Canvas"},_react.default.createElement(DeeplyConnectedNumeric,{traceIndexes:[0],label:"Width",attr:"width"})))).find("[attr=\"width\"]").find(_components.Numeric);expect(wrapper.length).toBe(0)});it("can modify plotProps with <Trace><PlotlySection><LayoutComp>",()=>{const fixtureProps=_testUtils.fixtures.scatter({layout:{width:10}});const TracePanel=(0,_.connectTraceToPlot)(_components.PlotlyPanel);const MAXWIDTH=1000;const LayoutSection=(0,_.connectLayoutToPlot)(_components.PlotlySection);const ModifiedNumeric=(0,_.connectToContainer)(_components.Numeric,{modifyPlotProps:(props,context,plotProps)=>{plotProps.max=MAXWIDTH}});const wrapper=(0,_testUtils.mount)(_react.default.createElement(_testUtils.TestEditor,_objectSpread({},fixtureProps),_react.default.createElement(TracePanel,{traceIndexes:[0]},_react.default.createElement(LayoutSection,{name:"Canvas"},_react.default.createElement(ModifiedNumeric,{traceIndexes:[0],label:"Width",attr:"width"}))))).find("[attr=\"width\"]").find(_NumericInput.default);expect(wrapper.prop("max")).toBe(MAXWIDTH)})});
//# sourceMappingURL=nestedContainerConnections-test.js.map