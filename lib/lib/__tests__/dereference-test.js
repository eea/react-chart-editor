"use strict";var _dereference=_interopRequireDefault(require("../dereference"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var __signature__=typeof reactHotLoaderGlobal!=="undefined"?reactHotLoaderGlobal.default.signature:function(a){return a};describe("dereference",()=>{it("does not search into data arrays",()=>{const container=[{y:[{ysrc:"x1"}],xsrc:"x1"}];(0,_dereference.default)(container,{x1:[1,2,3]});expect(container[0].y[0].y).toBeUndefined();expect(Array.isArray(container[0].x)).toBe(true)});it("does searches into transform arrays",()=>{const container=[{transforms:[{ysrc:"x1"}],xsrc:"x1"}];(0,_dereference.default)(container,{x1:[1,2,3]});expect(Array.isArray(container[0].transforms[0].y)).toBe(true);expect(Array.isArray(container[0].x)).toBe(true)});it("handles multidimensional srcs correctly",()=>{const container=[{zsrc:["z1","z2"],type:"heatmap"}];(0,_dereference.default)(container,{z1:[1,2,3],z2:[2,2,2]});expect(Array.isArray(container[0].z[0])).toBe(true);expect(Array.isArray(container[0].z[1])).toBe(true);expect(Array.isArray(container[0].z[2])).toBe(true);expect(container[0].z[0][0]).toBe(1);expect(container[0].z[0][1]).toBe(2);expect(container[0].z[1][0]).toBe(2);expect(container[0].z[1][1]).toBe(2);expect(container[0].z[2][0]).toBe(3);expect(container[0].z[2][1]).toBe(2)});it("handles ambiguous 2d srcs correctly",()=>{const container=[{zsrc:["z1"],type:"heatmap"}];(0,_dereference.default)(container,{z1:[1,2,3]});expect(Array.isArray(container[0].z[0])).toBe(true);expect(Array.isArray(container[0].z[1])).toBe(true);expect(Array.isArray(container[0].z[2])).toBe(true);expect(container[0].z[0][0]).toBe(1);expect(container[0].z[1][0]).toBe(2);expect(container[0].z[2][0]).toBe(3)});it("uses custom function if provided in config",()=>{const customParsing=src=>src.split(",");const container=[{zsrc:"z1,z2",type:"heatmap"}];(0,_dereference.default)(container,{z1:[1,2,3],z2:[2,2,2]},{toSrc:customParsing});expect(Array.isArray(container[0].z[0])).toBe(true);expect(Array.isArray(container[0].z[1])).toBe(true);expect(Array.isArray(container[0].z[2])).toBe(true);expect(container[0].z[0][0]).toBe(1);expect(container[0].z[0][1]).toBe(2);expect(container[0].z[1][0]).toBe(2);expect(container[0].z[1][1]).toBe(2);expect(container[0].z[2][0]).toBe(3);expect(container[0].z[2][1]).toBe(2)});it("can dereference top level layout keys",()=>{const container={metasrc:"x1",xaxis:{ticktext:"x2"}};(0,_dereference.default)(container,{x1:["yes!"],x2:["some","text"]});expect(Array.isArray(container.meta)).toBe(true);expect(container.meta[0]).toBe("yes!")})});
//# sourceMappingURL=dereference-test.js.map